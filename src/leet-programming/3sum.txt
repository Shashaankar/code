"""
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
"""
class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        ret_list = []
        if nums == None or len(nums) <=2 :
            return ret_list
            
        i,j,k = 0,0,0
        # Use any O(nlogn) sorting algorithm to sort in incresing order
        nums = sorted(nums)
        n = len(nums)
        
        print "DEBUG"
        for num in nums:
            print num
            
        while i < n-2:
            # make sure we are not repeating the inner logic for same number again
            if i == 0 or (i > 0 and nums[i] != nums[i-1]):
                j = i+1
                k = n-1
                while j < k:
                    cur_sum = nums[i]+nums[j]+nums[k]
                    if cur_sum < 0:
                        j += 1
                    elif cur_sum > 0:
                        k -= 1
                    else:
                        ret_list.append([nums[i], nums[j], nums[k]])
                        j += 1
                        k -= 1
                        
                        while j < k and nums[j] == nums[j-1]:
                            j += 1
                        while j < k and nums[k] == nums[k+1]:
                            k -= 1
                        
                        
            # Increment i for next loop
            i += 1
            
            
        return ret_list
