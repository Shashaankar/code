/**
Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher's h-index.

According to the definition of h-index on Wikipedia: "A scientist has index h if h of his/her N papers have at least h citations each, and the other N - h papers have no more than h citations each."

For example, given citations = [3, 0, 6, 1, 5], which means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively. Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, his h-index is 3.

Note: If there are several possible values for h, the maximum one is taken as the h-index.

Hint:

An easy approach is to sort the array first.
**/

int hIndex(int* citations, int n) {
    
    if (!citations || n<=0) {
        return 0;
    }
    
    int *count;
    int i,total_sum;
    
    count = calloc(sizeof(int), (n+1));
    
    
    // Here are we are building a count array for number of references
    // Remember that h index can not be greater than n so for all references > n
    // We accoun in the last inde
    for (i=0; i<n; i++) {
        if (citations[i] > n) {
            count[n]++;
        } else {
            count[citations[i]]++;
        }
    }
    
    total_sum = 0;
    for (i=n; i>=0; i--) {
        total_sum += count[i];
        if (total_sum >= i) {
            return i;
        }
    }
    
    return 0;
    
}