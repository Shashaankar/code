/**
Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum = s. If there isn't one, return 0 instead.

For example, given the array [2,3,1,2,4,3] and s = 7,
the subarray [4,3] has the minimal length under the problem constraint.

click to show more practice.

More practice:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).
**/


#define MIN(_a, _b) ((_a)>(_b)?(_b):(_a))

int minSubArrayLen(int s, int* nums, int numsSize) {
    
    if (!nums || numsSize <= 0) {
        return 0;
    }
    
    int i,sum;
    sum = 0;
    int first_pos = 0;
    int min_length = INT_MAX;
    
    for (i=0; i<numsSize; i++) {
        sum += nums[i];
        
        while (sum >= s) {
            min_length = MIN(min_length, i-first_pos+1);
            sum -= nums[first_pos];
            first_pos++;
        }
        
    }
    
    return min_length != INT_MAX ? min_length : 0;
}

