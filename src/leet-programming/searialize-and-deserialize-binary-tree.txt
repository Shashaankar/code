"""
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following tree

    1
   / \
  2   3
     / \
    4   5
as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.
Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.
"""


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:


    def serializeRecu(self, root, encode):
        
        # Encode special marker to reprsent null
        if root == None:
            encode.append('#')
            return
            
        # Encode tree in pre-order traversal
        encode.append(root.val)
        self.serializeRecu(root.left, encode)
        self.serializeRecu(root.right, encode)
    
    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        tree_encode = []
        
        if root == None:
            return tree_encode.append(None)
        
        self.serializeRecu(root, tree_encode)
        
        return tree_encode
        
        
    def decodeRecu(self, data, index):
            
        if index[0] >= len(data):
            return
            
        if data[index[0]] == '#':
            return None
                
        node = TreeNode(data[index[0]])
        index[0] += 1
        node.left = self.decodeRecu(data, index)
        index[0] += 1
        node.right = self.decodeRecu(data, index)
        
        return node
        

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        print data
        if data == None:
            return None
            
        index = []
        index.append(0)
        root = None
        root = self.decodeRecu(data, index)
        
        return root

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))
