"""
Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.

Note:
The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.

Example 1:
Given nums = [1, -1, 5, -2, 3], k = 3,
return 4. (because the subarray [1, -1, 5, -2] sums to 3 and is the longest)

Example 2:
Given nums = [-2, -1, 2, 1], k = 1,
return 2. (because the subarray [-1, 2] sums to 1 and is the longest)

Follow Up:
Can you do it in O(n) time?


Author: xuyirui (leet code user)
The subarray sum reminds me the range sum problem. Preprocess the input array such that you get
the range sum in constant time.
sum[i] means the sum from 0 to i inclusively
the sum from i to j is sum[j] - sum[i - 1] except that from 0 to j is sum[j].

j-i is equal to the length of subarray of original array. we want to find the max(j - i)
for any sum[j] we need to find if there is a previous sum[i] such that sum[j] - sum[i] = k
Instead of scanning from 0 to j -1 to find such i, we use hashmap to do the job in constant time.
However, there might be duplicate value of of sum[i] we should avoid overriding its index as we want the max j - i, so we want to keep i as left as possible.
"""

class Solution(object):
    def maxSubArrayLen(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        
        n = len(nums)
        hash_map = dict()
        max_len = 0
        for i in range(1,n):
            nums[i] += nums[i-1]
        """
         look at this part max = Math.max(max, i - map.get(nums[i] - k));
        so make map.put(0,-1) is just to say if the nums[i]-k==0 which means index from 0 to index i will make to sum k.
        in this case, the length of the subarray will be 0,1,2,...i, which is i+1, so you need the value of map.get(nums[i]-k) to be "-1"
        """
        hash_map[0] = -1
        for i in range(n):
            if nums[i] - k in hash_map.keys():
                max_len = max(max_len, i - hash_map[nums[i]-k])
                print "DEBUG max_len = %s" % (max_len)
            if nums[i] not in hash_map.keys():
                hash_map[nums[i]] = i
                print "DEBUG inserted into hash map = %s" % (hash_map)
            
        return max_len
        