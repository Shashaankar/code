"""
lone an undirected graph. Each node in the graph contains a label and a list of its neighbors.


OJ's undirected graph serialization:
Nodes are labeled uniquely.

We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
As an example, consider the serialized graph {0,1,2#1,2#2,2}.

The graph has a total of three nodes, and therefore contains three parts as separated by #.

First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
Visually, the graph looks like the following:

       1
      / \
     /   \
    0 --- 2
         / \
         \_/
"""

# Definition for a undirected graph node
# class UndirectedGraphNode:
#     def __init__(self, x):
#         self.label = x
#         self.neighbors = []
# Time complexity: O(number_of_nodes)
# Space complexity: Since we do maintain a hash map its O(n)
# and some additonal space in process stack for recursive calls

class Solution:
    
    def cloneGraphDfs(self, node, hash_map):
        
        if node in hash_map.keys():
            return hash_map[node]
            
        clone_node = UndirectedGraphNode(node.label)
        hash_map[node] = clone_node
        for neigh_node in node.neighbors:
            clone_node.neighbors.append(self.cloneGraphDfs(neigh_node, hash_map))
            
        return clone_node
    
    # @param node, a undirected graph node
    # @return a undirected graph node
    def cloneGraph(self, node):
        
        if node == None:
            return None
            
        # Maintain a hash map of current nodes to cloned nodes
        hash_map = dict()
        return self.cloneGraphDfs(node, hash_map)
        