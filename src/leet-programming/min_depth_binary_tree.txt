
"""
Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
"""
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def minDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        
        
        if root == None:
            return 0
            
        if (root.left != None) and (root.right != None):
            left_depth = 1+self.minDepth(root.left)
            right_depth = 1+ self.minDepth(root.right)
            return (left_depth if left_depth < right_depth else right_depth)
        elif root.left != None:
            return 1+self.minDepth(root.left)
        elif root.right != None:
            return 1+self.minDepth(root.right)
        else:
            return 1
        
        
        
        
        
        
        
        